{
    "project": {},
    "files": {
        "load-oauth-secrets.js": {
            "name": "load-oauth-secrets.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "populate-oauth-secrets.js": {
            "name": "populate-oauth-secrets.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "requestHandlers.js": {
            "name": "requestHandlers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {},
    "classitems": [
        {
            "file": "load-oauth-secrets.js",
            "line": 1,
            "description": "Loads OAuth secrets from the mongo collection specified in the oauth_collection variable of the ../config/mongodb.json config file.\nThis should be called by index.js.",
            "class": ""
        },
        {
            "file": "populate-oauth-secrets.js",
            "line": 1,
            "description": "Loads OAuth consumer keys and secrets into MongoDB.\nThey will be loaded into the collection specified as the oauth_collection in the mongodb.json config file.\nThis will REPLACE all oauth secrets in Mongo.\nThe oauth secrets are loaded from the file config/oauth-secrets.json .  After this script is executed, the oauth secrets in this file will\nbe the ONLY oauth secrets stored in Mongo.\nTo run, put all of the keys that you want in the db into the config file mentioned above and run:\n$ node populate-oauth-secrets.js",
            "class": ""
        },
        {
            "file": "requestHandlers.js",
            "line": 49,
            "description": "Response handler to /data URI.",
            "params": [
                {
                    "name": "The",
                    "description": "http.server.response object of the request."
                },
                {
                    "name": "method",
                    "description": "The HTTP method (in all caps)."
                },
                {
                    "name": "query",
                    "description": "The query string component of the URI"
                },
                {
                    "name": "postData",
                    "description": "The post data (parsed into an Object)."
                }
            ],
            "class": ""
        },
        {
            "file": "requestHandlers.js",
            "line": 116,
            "description": "Response handler to /metrics URI.",
            "params": [
                {
                    "name": "The",
                    "description": "http.server.response object of the request."
                },
                {
                    "name": "method",
                    "description": "The HTTP method (in all caps)."
                },
                {
                    "name": "query",
                    "description": "The query string component of the URI"
                },
                {
                    "name": "postData",
                    "description": "The post data (parsed into an Object). (should be empty for a metric request)"
                }
            ],
            "class": ""
        },
        {
            "file": "requestHandlers.js",
            "line": 161,
            "description": "Decodes a query string in the form q=<URI-encoded JSON object>.",
            "params": [
                {
                    "name": "query",
                    "description": "A query string in the form q=<URI-encoded JSON object>"
                }
            ],
            "return": {
                "description": "An object created from the JSON, or null if there's an error."
            },
            "class": ""
        },
        {
            "file": "requestHandlers.js",
            "line": 181,
            "params": [
                {
                    "name": "a",
                    "description": "string containing the object id to validate"
                }
            ],
            "return": {
                "description": "true if it is 24 hex characters, false if not"
            },
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nLoads OAuth secrets from the mongo collection specified in the oauth_collection variable of the ../config/mongodb.json config file.\nThis should be called by index.js.",
            "line": " load-oauth-secrets.js:1"
        },
        {
            "message": "Missing item type\nLoads OAuth consumer keys and secrets into MongoDB.\nThey will be loaded into the collection specified as the oauth_collection in the mongodb.json config file.\nThis will REPLACE all oauth secrets in Mongo.\nThe oauth secrets are loaded from the file config/oauth-secrets.json .  After this script is executed, the oauth secrets in this file will\nbe the ONLY oauth secrets stored in Mongo.\nTo run, put all of the keys that you want in the db into the config file mentioned above and run:\n$ node populate-oauth-secrets.js",
            "line": " populate-oauth-secrets.js:1"
        },
        {
            "message": "Missing item type\nResponse handler to /data URI.",
            "line": " requestHandlers.js:49"
        },
        {
            "message": "Missing item type\nResponse handler to /metrics URI.",
            "line": " requestHandlers.js:116"
        },
        {
            "message": "Missing item type\nDecodes a query string in the form q=<URI-encoded JSON object>.",
            "line": " requestHandlers.js:161"
        },
        {
            "message": "Missing item type",
            "line": " requestHandlers.js:181"
        }
    ]
}